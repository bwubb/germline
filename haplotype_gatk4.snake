

import datetime
import sys
import os
import json
from pprint import pprint
from snakemake.utils import read_job_properties


with open(config.get('project',{}).get('sample_list','samples.list'),'r') as infile:#sample_list in config, default is samples.list
    SAMPLES=infile.read().splitlines()

def bam_input(wildcards):
    if config.get('bams_list',False):
        return BAMS[wildcards.sample]
    else:
        return "bam_input/final/{sample}/{reference}/{sample}.ready.bam".format(sample=wildcards.sample,reference=config['resources']['reference']['key'])

def gvcf_input(wildcards):
    return ' '.join([f'-V data/work/{sample}/gatk-haplotype.g.vcf.gz' for sample in SAMPLES])

#localrules: 

rule all:
    input:
        'data/work/{project}/gatk-haplotype.{targets}.vqsr_recal.snps.indels.vcf.gz'.format(project=config['project']['name'],targets=config['resources']['library']['targets_key'])

rule HaplotypeCaller:
    input:
        bam_input
    output:
        "data/work/{sample}/gatk-haplotype.g.vcf.gz"
        #I dont like this naming. This is not subset to the library
    params:
        #dbsnp="/home/bwubb/b37_genomes/dbsnp_137.b37.vcf",
        reference=config['resources']['reference']['fasta'],
        memory='10g'
    shell:
        "gatk --java-options '-Xmx{params.memory}' HaplotypeCaller -I {input} -O {output} -R {params.reference} --emit-ref-confidence GVCF"


#GenomicsDBImport would be the better choice but currently it can only be used for one interval at a time, and chromosomes are too big
rule CombineGVCFs:
    input:
        expand("data/work/{sample}/gatk-haplotype.g.vcf.gz",sample=SAMPLES)#removed library for this because it isnt a library subset.
    output:
        "data/work/{project}/gatk-haplotype.g.vcf.gz".format(project=config['project']['name'])
    params:
        reference=config['resources']['reference']['fasta'],
        variants=gvcf_input,
        memory='30g'
    shell:
        "gatk --java-options '-Xmx{params.memory}' CombineGVCFs {params.variants} -O {output} -R {params.reference}"

#Would be nice to have some unity between this method and the somatic FALCONX need for haplotypecaller calls
#This one I will subset intervals, but the latter I would not (I think)
#
rule SelectIntervals:
    input:
        #"data/work/{project}/gatk-haplotype.g.vcf.gz"
        rules.CombineGVCFs.output
    output:
        "data/work/{project}/gatk-haplotype.{targets}.g.vcf.gz".format(project=config['project']['name'],targets=config['resources']['library']['targets_key'])
    params:
        reference=config['resources']['reference']['fasta'],
        intervals=config['resources']['library']['targets.intervals'],
        memory='30g'
    shell:
        "gatk --java-options '-Xmx{params.memory}' SelectVariants -V {input} -O {output} -R {params.reference} -L {params.intervals}"

rule GenotypeGVCFs:
    input:
        #"data/work/{project}/gatk-haplotype.{targets}.g.vcf.gz"
        rules.SelectIntervals.output
    output:
        "data/work/{project}/gatk-haplotype.{targets}.raw.snps.indels.vcf.gz".format(project=config['project']['name'],targets=config['resources']['library']['targets_key'])
    params:
        reference=config['resources']['reference']['fasta'],
        intervals=config['resources']['library']['targets.intervals'],
        memory="30g"
    shell:
        "gatk --java-options '-Xmx{params.memory}' GenotypeGVCFs -R {params.reference} -V {input} -L {params.intervals} -O {output}"

rule VQSR_snp_model:
    input:
        rules.GenotypeGVCFs.output
        #"data/work/{project}/gatk-haplotype.{targets}.raw.snps.indels.vcf.gz"
    output:
        recalFile="data/work/{project}/snps.recal",
        tranchesFile="data/work/{project}/snps.tranches",
        rscriptFile="data/work/{project}/snps.R"
    params:
        reference=config['resources']['reference']['fasta'],
        hapmap="/home/bwubb/resources/gatk/hapmap_3.3.b37.sites.vcf.gz",
        omni="/home/bwubb/resources/gatk/1000G_omni2.5.b37.sites.vcf.gz",
        _1000G="/home/bwubb/resources/gatk/1000G_phase1.snps.high_confidence.b37.vcf.gz",
        dbsnp="/home/bwubb/resources/gatk/dbsnp_138.b37.vcf.gz",
        memory='30g'
    shell:
        "gatk --java-options '-Xmx{params.memory}' VariantRecalibrator -R {params.reference} -V {input} "
        "-O {output.recalFile} --tranches-file {output.tranchesFile} --rscript-file {output.rscriptFile} "
        "--resource hapmap,known=false,training=true,truth=true,prior=15.0:{params.hapmap} "
        "--resource omni,known=false,training=true,truth=true,prior=12.0:{params.omni} "
        "--resource 1000G,known=false,training=true,truth=false,prior=10.0:{params._1000G} "
        "--resource dbsnp,known=true,training=false,truth=false,prior=2.0:{params.dbsnp} "
        "-an QD -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an DP -an InbreedingCoeff "
        "-mode SNP -titv 3.0 "
        "-tranche 100.0 -tranche 99.9 -tranche 99.5 "
        "-tranche 99.3 -tranche 99.0 -tranche 98.9 "
        "-tranche 98.8 -tranche 98.6 -tranche 98.5 "
        "-tranche 98.3 -tranche 98.2 -tranche 98.1 "
        "-tranche 98.0 -tranche 97.9 -tranche 97.8 "
        "-tranche 97.5 -tranche 97.0 -tranche 95.0 "
        "-tranche 90.0"

rule VQSR_indel_model:
    input:
        rules.GenotypeGVCFs.output
        #"data/work/{project}/gatk-haplotype.{targets}.raw.snps.indels.vcf.gz"
    output:
        recalFile="data/work/{project}/indels.recal",
        tranchesFile="data/work/{project}/indels.tranches",
        rscriptFile="data/work/{project}/indels.R"
    params:
        reference=config['resources']['reference']['fasta'],
        mills="/home/bwubb/resources/gatk/Mills_and_1000G_gold_standard.indels.b37.sites.vcf.gz",
        dbsnp="/home/bwubb/resources/gatk/dbsnp_138.b37.vcf.gz",
        memory='30g'
    shell:
        "gatk --java-options '-Xmx{params.memory}' VariantRecalibrator -R {params.reference} -V {input} "
        "-O {output.recalFile} --tranches-file {output.tranchesFile} --rscript-file {output.rscriptFile} "
        "--resource mills,known=false,training=true,truth=true,prior=12.0:{params.mills} "
        "--resource dbsnp,known=true,training=false,truth=false,prior=2.0:{params.dbsnp} "
        "-an FS -an SOR -an QD -an MQRankSum -an ReadPosRankSum -an InbreedingCoeff "
        "-mode INDEL "
        "-tranche 100.0 -tranche 99.9 -tranche 99.5 "
        "-tranche 99.3 -tranche 99.0 -tranche 98.9 "
        "-tranche 98.8 -tranche 98.6 -tranche 98.5 "
        "-tranche 98.3 -tranche 98.2 -tranche 98.1 "
        "-tranche 98.0 -tranche 97.9 -tranche 97.8 "
        "-tranche 97.5 -tranche 97.0 -tranche 95.0 "
        "-tranche 90.0"

rule Apply_snp_model:
    input:
        vcf="data/work/{project}/gatk-haplotype.{targets}.raw.snps.indels.vcf.gz",
        recalFile="data/work/{project}/snps.recal",
        tranchesFile="data/work/{project}/snps.tranches"
    output:
        "data/work/{project}/gatk-haplotype.{targets}.recal_snps.raw_indels.vcf.gz"
    params:
        reference=config['resources']['reference']['fasta'],
        memory='30g'
    shell:
        "gatk --java-options '-Xmx{params.memory}' ApplyVQSR -R {params.reference} "
        "--recal-file {input.recalFile} --tranches-file {input.tranchesFile} -V {input.vcf} --ts_filter_level 99.6 -mode SNP -O {output}"

#I wonder if I could apply the indel model to the raw snps and indels too.
#This would make "data/work/{project}/gatk-haplotype.{targets}.raw_snps.recal_indels.vcf.gz"
#Then run some sort of combine with PASS filtering.


#additionally I could specify -mode BOTH for model building and application
#But the cutoff level would be universal

rule Apply_indel_model:
    input:
        vcf="data/work/{project}/gatk-haplotype.{targets}.recal_snps.raw_indels.vcf.gz",
        recalFile="data/work/{project}/indels.recal",
        tranchesFile="data/work/{project}/indels.tranches"
    output:
        "data/work/{project}/gatk-haplotype.{targets}.vqsr_recal.snps.indels.vcf.gz"
    params:
        reference=config['resources']['reference']['fasta'],
        memory='30g'
    shell:
        "gatk --java-options '-Xmx{params.memory}' ApplyVQSR -R {params.reference} "
        "--recal-file {input.recalFile} --tranches-file {input.tranchesFile} -input {input.vcf} --ts_filter_level 97.0 -mode INDEL -O {output}"

#rule Hard_Filter_snp:#verify this still follows best practices
#    input:
#        "data/work/{name}/{library}/gatk-haplotype.raw.snps.vcf.gz"
#    output:
#        "data/work/{name}/{library}/gatk-haplotype.hard-filter_recalibrated.snps.vcf.gz"
#    params:
#        reference=config['resources']['reference']['fasta'],
#        memory='10240m'
#    shell:
#        "java -Xmx{params.memory} -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T VariantFiltration -V {input} -o {output} "
#        "--filterExpression 'QD < 2.0' --filterName 'SNP_QD' --filterExpression 'FS > 60.0' --filterName 'SNP_FS' --filterExpression 'MQ < 40.0' --filterName 'SNP_MQ' "
#        "--filterExpression 'MQRankSum < -12.5' --filterName 'SNP_MQRankSum' --filterExpression 'ReadPosRankSum < -8.0' --filterName 'SNP_ReadPosRankSum' --filterExpression 'SOR > 3.0' --filterName 'SNP_SOR'"

#rule Hard_Filter_indel:
#    input:
#        "data/work/{name}/{library}/gatk-haplotype.raw.indels.vcf.gz"
#    output:
#        "data/work/{name}/{library}/gatk-haplotype.hard-filter_recalibrated.indels.vcf.gz"
#    params:
#        reference=config['resources']['reference']['fasta'],
#        memory='10240m'
#    shell:
#        "java -Xmx{params.memory} -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T VariantFiltration -V {input} -o {output} "
#        "--filterExpression 'QD < 2.0' --filterName 'INDEL_QD' --filterExpression 'FS > 200.0' --filterName 'INDEL_FS' "
#        "--filterExpression 'ReadPosRankSum < -20.0' --filterName 'INDEL_ReadPosRankSum' --filterExpression 'SOR > 10.0' --filterName 'INDEL_SOR'"

def select_filter(wildcards):
    if 'Exon' in config['resources']['library']['key']:
        return {"snp":"data/work/{wildcards.name}/{wildcards.library}/gatk-haplotype.vqsr_recalibrated.snps.vcf.gz".format(wildcards=wildcards),
        "indel":"data/work/{wildcards.name}/{wildcards.library}/gatk-haplotype.vqsr_recalibrated.indels.vcf.gz".format(wildcards=wildcards)}
    else:
        return {"snp":"data/work/{wildcards.name}/{wildcards.library}/gatk-haplotype.hard-filter_recalibrated.snps.vcf.gz".format(wildcards=wildcards),
        "indel":"data/work/{wildcards.name}/{wildcards.library}/gatk-haplotype.hard-filter_recalibrated.indels.vcf.gz".format(wildcards=wildcards)}

#rule Combine_snp_indels:
#    input:
#        unpack(select_filter)
#    output:
#        "data/work/{name}/{library}/gatk-haplotype.{filter}_recalibrated.snps.indels.vcf.gz"
#    params:
#        reference=config['resources']['reference']['fasta'],
#        memory='10240m'
#    shell:
#        "java -Xmx{params.memory} -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T CombineVariants "
#        "--variant:snp {input.snp} --variant:indel {input.indel} -priority snp,indel --assumeIdenticalSamples -env -o {output}"

#rule FilteredVCF:
#    input:
#        "data/final/{name}/{library}/gatk-haplotype.{filter}_recalibrated.snps.indels.vcf.gz"
#    output:
#        "data/final/{sample}/{library}/gatk-haplotype.{filter}_recalibrated.pass.snps.indel.vcf.gz"
#    params:
#        reference=config['resources']['reference']['fasta'],
#        intervals=config['resources']['library']['intervals'],
#        memory='10240m'
#    shell:
#        "java -Xmx{params.memory} -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T SelectVariants -V {input} -L {params.intervals} -env -ef -sn {wildcards.sample} -o {output}"
